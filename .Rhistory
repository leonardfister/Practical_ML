xlab="dose (mg)",
ylab="mean tooth growth (mm)",
type="n")
with (data = dat[dat$supp=="VC",],
points(dose,len))
plot(mVC$dose, mVC$mean.len,
xlim=c(0,2.5),ylim=c(0,35),
xlab="dose (mg)",
ylab="mean tooth growth (mm)",
type="n")
with (data = dat[dat$supp=="VC",],
points(dose,len))
with (data = mVC,
expr = errbar(dose, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T,cex=1.5,lwd=2))
with (data = mOJ,
expr = errbar(dose, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T, pch=19,
col="red",errbar.col="red",cex=1.5,lwd=2))
legend("topleft",
legend=c("orange juice","vitamin C"),pch=c(19,19),col=c("red","black"),
cex=1.5)
with (data = dat[dat$supp=="OJ",],
points(dose,len))
with (data = dat[dat$supp=="OJ",],
points(dose,len,col="red"))
legend("topleft",
legend=c("orange juice", "mean (orange juice)","vitamin C","mean (vitamin C)"),pch=c(19,19),col=c("red","black"),
cex=1.5)
```
legend("topleft",
legend=c("orange juice", "mean (orange juice)","vitamin C","mean (vitamin C)"),pch=c(1,1,19,19),col=c("red","red","black","black"),
cex=1.5)
```
legend=c("orange juice", "mean (orange juice)","vitamin C","mean (vitamin C)"),pch=c(1,19,1,19),col=c("red","red","black","black"),
cex=1.5)
legend("topleft",
legend=c("orange juice", "mean (orange juice)","vitamin C","mean (vitamin C)"),pch=c(1,19,1,19),col=c("red","red","black","black"),
cex=1.5)
```
axis(1,c(.5,1,2))
par(mfrow=c(1,1))
library("Hmisc")
plot(mVC$dose, mVC$mean.len,
xlim=c(0,2.5),ylim=c(0,35),
main="Tooth Growth ",
xlab="dose (mg)",
xaxt="n",
ylab="tooth growth (mm)",
type="n")
axis(1,c(.5,1,2))
with (data = dat[dat$supp=="VC",],
points(dose,len))
with (data = dat[dat$supp=="OJ",],
points(dose,len,col="red"))
with (data = mVC,
expr = errbar(dose+.1, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T,cex=1.5,lwd=2))
with (data = mOJ,
expr = errbar(dose+.1, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T, pch=19,
col="red",errbar.col="red",cex=1.5,lwd=2))
legend("topleft",
legend=c("orange juice", "mean (orange juice)","vitamin C","mean (vitamin C)"),pch=c(1,19,1,19),col=c("red","red","black","black"))
```
with (data = mVC,
expr = errbar(dose+.01, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T,cex=1.5,lwd=2))
with (data = mOJ,
expr = errbar(dose+.01, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T, pch=19,
col="red",errbar.col="red",cex=1.5,lwd=2))
with (data = mVC,
expr = errbar(dose, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T,cex=1.5,lwd=2))
with (data = mOJ,
expr = errbar(dose, mean.len, mean.len+sd.len,  mean.len-sd.len, add=T, pch=19,
col="red",errbar.col="red",cex=1.5,lwd=2))
head(dat)
str(dat)
dim(dat)
dim(dat)
head(dat)
str(dat)
unique(dat$dose)
From the `t str` function see that there are 60 measurements of the three columns `t len`, `t supp` and `t dose`. There are two levels for the factor `t supp`, orange juice `t OJ` and vitamin C `t VC`. The supplement has been tested for three different doses, 0.5, 1 and 2 mg. ?ToothGrowth
?ToothGrowth
?ToothGrowth
graphics.off()
?ToothGrowth
?t.test
head(dat)
head(dat,60)
head(dat,60)
dOJ <- dat[dat$supp=="OJ",]
dVC <- dat[dat$supp=="VC",]
diff <- dOJ$len - dVC$len
diff
dVC
diff <- cbind(dOJ$len - dVC$len, dOJ$dose)
diff
plot(diff)
diff <- cbind("diff"=dOJ$len - dVC$len, dOJ$dose)
plot(diff$dose,diff$len)
plot(diff$dose,diff$diff)
diff
diff <- cbind("diff"=dOJ$len-dVC$len, dOJ$dose)
diff
plot(diff$dose,diff$diff)
diff
diff <- cbind("diff"=dOJ$len-dVC$len, "dose"=dOJ$dose)
diff
plot(diff$dose,diff$diff)
diff <- cbind("diff"=dOJ$len-dVC$len, "dose"=dOJ$dose)
diff
plot(diff$dose,diff$diff)
diff$dose
diff$"dose"
diff <- cbind("diff"=dOJ$len-dVC$len, "dose"=dOJ$dose)
diff
names(diff)
?cbind
diff <- data.frame("diff"=dOJ$len-dVC$len, "dose"=dOJ$dose)
names(diff)
?cbind
plot(diff$dose,diff$diff)
t.test(diff)
t.test(diff,lower.tail=FALSE)
t.test(diff,lower.tail=FALSE,var.equal=TRUE)
t.test(diff,lower.tail=FALSE,var.equal=TRUE)
diff.0.5 <- diff[diff$dose==.5, ]
diff.0.5
diff.1 <- diff[diff$dose==.5, ]
diff_0.5 <- diff[diff$dose==.5, ]
diff_1 <- diff[diff$dose==1, ]
diff_2 <- diff[diff$dose==2, ]
test_0.5 <- t.test(diff_0.5,paired=TRUE)
test_0.5 <- t.test(diff_0.5)
test_0.5
test_0.5 <- t.test(diff_0.5)
test_1 <- t.test(diff_1)
test_2 <- t.test(diff_2)
names(test_0.5)
test_0.5
test_1
test_2
test_1
test_0.5
test_1
test_2
source('~/.active-rstudio-document', echo=TRUE)
test_0.5$p.value
test_1$p.value
test_2$p.value
t.test(diff ~ dose, data= diff)
test_o.5
test_0.5
test_0.5
test_0.5 <- t.test(diff_0.5)
test_1 <- t.test(diff_1)
test_2 <- t.test(diff_2)
test_0.5
test_1
test_2
test_0.5 <- t.test(diff_0.5,lower.tail=TRUE)
test_0.5$p.value
test_0.5 <- t.test(diff_0.5)
test_0.5$p.value
test_0.5 <- t.test(diff_0.5,lower.tail=TRUE)
test_0.5$p.value
test_0.5
test_0.5 <- t.test(diff_0.5,paired=TRUE)
test_0.5
test_0.5 <- t.test(diff_0.5)
test_0.5 <- t.test(diff_0.5, alternative = "two.sided")
test_0.5$p.value
test_0.5 <- t.test(diff_0.5, alternative = "two.sided")
test_1 <- t.test(diff_1, alternative = "two.sided")
test_2 <- t.test(diff_2, alternative = "two.sided")
test_0.5$p.value
test_1$p.value
test_2$p.value
test_0.5
test_1
test_2
test_2 <- t.test(diff_2, paired=T, alternative = "two.sided")
diff_2
test_0.5$conf.int
test_0.5$conf.int[1]
test_0.5$conf.int[1:2]
test_1$conf.int[1:2]
pop.mean
sample.mean <- mean(mns) # estimator
sample.sd <- sqrt(n)*sd(mns) # estimator for sigma/sqrt(n), sigma ... sd of the population distr.
```
We assume the limiting (population) distributon to be Gaussian with both the mean and standard deviation being $1/\lamdba$,
```{r}
pop.mean <- 1/lambda
pop.sd <- 1/lambda
```
pop.mean
sample.sd*sqrt(n)
sample.mean
pop.mean
sample.sd*sqrt(n)
pop.sd
sample.mean
pop.mean
sample.sd*sqrt(n)
pop.sd
lambda <- .2
n <- 40
N <- 1000
mns=NULL
for(i in 1:N) mns = c(mns,{set.seed(i^2); mean(rexp(n,lambda))})
sample.mean <- mean(mns) # estimator
sample.sd <- sqrt(n)*sd(mns) # estimator for sigma/sqrt(n), sigma ... sd of the population distr.
pop.mean <- 1/lambda
pop.sd <- 1/lambda
sample.mean
pop.mean
sample.sd*sqrt(n)
pop.sd
sample.sd <- sd(mns) # estimator for sigma/sqrt(n), sigma ... sd of the population distr.
sample.sd*sqrt(n)
pop.sd
hist(mns,freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(sample.mean-4,sample.mean+4))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
abline(v=sample.mean,col="black",lwd=4,lty=2)
abline(v=c(sample.mean-sample.sd,sample.mean+sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
abline(v=pop.mean,col="red",lwd=2,lty=4)
abline(v=c(pop.mean-pop.sd,pop.mean+pop.sd),col="red",lwd=2,lty=5)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal 1",sigma,"-interval (",sigma,"=1/",lambda,")"))
),
col=c("black","black","black","red","red","red"),
lty=c(1,2,3,1,4,5),
lwd=c(3,4,4,3,2,2)
)
hist(mns,freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(sample.mean-4,sample.mean+4))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
abline(v=sample.mean,col="black",lwd=4,lty=2)
abline(v=c(sample.mean-sample.sd,sample.mean+sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
curve(dnorm(x,pop.mean,pop.sd/sqrt(n)),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
```{r,fig.width=10,fig.height=6}
hist(mns,freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(sample.mean-4,sample.mean+4))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
abline(v=sample.mean,col="black",lwd=4,lty=2)
abline(v=c(sample.mean-sample.sd,sample.mean+sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd/sqrt(n)),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
abline(v=pop.mean,col="red",lwd=2,lty=4)
abline(v=c(pop.mean-pop.sd,pop.mean+pop.sd),col="red",lwd=2,lty=5)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal 1",sigma,"-interval (",sigma,"=1/",lambda,")"))
),
col=c("black","black","black","red","red","red"),
lty=c(1,2,3,1,4,5),
lwd=c(3,4,4,3,2,2)
)
hist(mns,freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(sample.mean-4,sample.mean+4))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
abline(v=sample.mean,col="black",lwd=4,lty=2)
abline(v=c(sample.mean-sample.sd,sample.mean+sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
abline(v=pop.mean,col="red",lwd=2,lty=4)
abline(v=c(pop.mean-pop.sd,pop.mean+pop.sd),col="red",lwd=2,lty=5)
curve(dnorm(x,pop.mean,pop.sd/sqrt(n)),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
abline(v=pop.mean,col="red",lwd=2,lty=4)
abline(v=c(pop.mean-pop.sd,pop.mean+pop.sd),col="red",lwd=2,lty=5)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal 1",sigma,"-interval (",sigma,"=1/",lambda,")"))
),
col=c("black","black","black","red","red","red"),
lty=c(1,2,3,1,4,5),
lwd=c(3,4,4,3,2,2)
)
hist((mns-pop.mean)/(pop.sd/sqrt(n)),freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(-3,3))
axis(2,ylim=c(0,.6))
hist((mns-pop.mean)/(pop.sd/sqrt(n)),freq=FALSE,
xlim=c(-3,3),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(-3,3))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
lines(density((mns-pop.mean)/(pop.sd/sqrt(n))), col="black", lwd=3)
abline(v=c(sample.sd/sqrt(n),sample.sd/sqrt(n)),col="black",lwd=4,lty=3)
sample.sd/sqrt(n)
sample.sd
```{r,fig.width=10,fig.height=6}
hist((mns-pop.mean)/(pop.sd/sqrt(n)),freq=FALSE,
xlim=c(-3,3),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(-3,3))
axis(2,ylim=c(0,.6))
lines(density((mns-pop.mean)/(pop.sd/sqrt(n))), col="black", lwd=3)
abline(v=0,col="black",lwd=4,lty=2)
abline(v=c(sample.sd,sample.sd),col="black",lwd=4,lty=3)
abline(v=c(-sample.sd,sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd/sqrt(n)),
curve(dnorm(x,0,1),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
curve(dnorm(x,0,1),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
curve(dnorm(x,0,1),
from=-3, to=3,add=T,col="red",lwd=3)
curve(dnorm(x,0,1), from=-3, to=3,add=T,col="red",lwd=3)
abline(v=0,col="red",lwd=2,lty=4)
abline(v=c(-pop.sd,pop.sd),col="red",lwd=2,lty=5)
abline(v=c(-pop.sd,pop.sd),col="red",lwd=2,lty=5)
abline(v=c(-1,1),col="red",lwd=2,lty=5)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal 1",sigma,"-interval (",sigma,"=1/",lambda,")"))
),
col=c("black","black","black","red","red","red"),
lty=c(1,2,3,1,4,5),
lwd=c(3,4,4,3,2,2)
)
hist(mns,freq=FALSE,
xlim=c(sample.mean-4,sample.mean+4),xaxt="n",
ylim=c(0,.6),yaxt="n",
lwd=3,col="grey",
main="Distributions: Mean of Exponential RVs vs. Normal ")
axis(1,xlim=c(sample.mean-4,sample.mean+4))
axis(2,ylim=c(0,.6))
lines(density(mns), col="black", lwd=3)
abline(v=sample.mean,col="black",lwd=4,lty=2)
abline(v=c(sample.mean-sample.sd,sample.mean+sample.sd),col="black",lwd=4,lty=3)
curve(dnorm(x,pop.mean,pop.sd/sqrt(n)),
from=sample.mean-4, to=sample.mean+4,add=T,col="red",lwd=3)
abline(v=pop.mean,col="red",lwd=2,lty=4)
abline(v=c(pop.mean-pop.sd,pop.mean+pop.sd),col="red",lwd=2,lty=5)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal 1",sigma,"-interval (",sigma,"=1/",lambda,")"))
),
col=c("black","black","black","red","red","red"),
lty=c(1,2,3,1,4,5),
lwd=c(3,4,4,3,2,2)
)
legend("topleft",
cex=1.1,
legend=c("sample distribution",
"sample mean",expression(paste("1",sigma,"-interval of sample")),
"normal distribution",
expression(paste("normal mean (",mu,"=1/",lambda,")")),
expression(paste("normal std. error (",sigma,$/\sqrt(n)$,")"))
),
?download
?download
?file.download
?download.file
graphics.off()
?download.file
graphics.off()
graphics.off()
?download.file
?download.file
graphics.off()
graphics.off()
graphics.off()
graphics.off()
?download.file
?ls
?ls
?download.file
?download.file
sum( predict(model,newdata=train.test) != train.test$classe ) / length(train.test$classe)
library(caret)
library(randomForest)
setwd("/Users/leo/github/Practical_ML/")
train <- read.csv("training.csv")
test <- read.csv("testing.csv")
dim(train)
levels(train$user_name)
dim(test)
column.deviation <- which(names(train) != names(test))
names(train)[column.deviation]
names(test)[column.deviation]
length(colnames(train)[colSums(is.na(train)) > 9/10*length(train)])
temp.train <- train[,1:159]
cols.train.no.NA <- colnames(temp.train)[colSums(is.na(temp.train)) < 9/10*length(temp.train)]
train <- cbind(train[cols.train.no.NA],"classe"=train[,160])
test <- cbind(test[cols.train.no.NA],"problem_id"=test[,160])
rm(temp.train)
index.train <- createDataPartition(train$classe, p=.85, list=F)
set.seed(123)
index.train <- createDataPartition(train$classe, p=.85, list=F)
train.train <- train[ index.train,]
train.test  <- train[-index.train,]
features <- names(train.train)[ ! grepl("X|user_name|window|time|amplitude|total|stddev|kurtosis|skewness|_x|_y|_z", names(train.train))]
features
train.train <- train.train[,features]
train.test  <- train.test [,features]
test <- test[,append(features[features!="classe"],"problem_id")]
set.seed(12345)
model <- train( classe ~ . , data = train.train, method = "rf", preProcess = c("center","scale"), trControl = trainControl(method="cv",number=5))
model$finalModel
sum( predict(model,newdata=train.test) != train.test$classe ) / length(train.test$classe)
predict( model, test)
save(model,"model.Rdata")
save(model,"model.Rdata")
#download.file("https://d396qusza40orc.cloudfront.net/predmachlearn/pml-training.csv","training.csv",method="curl")
setwd("/Users/leo/github/Practical_ML/")
save(model,"model.Rdata")
save(model,"model.Rdata")
save(model,"~/Desktop/model.Rdata")
save(model,file="~/Desktop/model.Rdata")
save(model,file="model.Rdata")
predict( model, test)
test.predictions <- predict(model, test)
test.predictions <- predict(model, test)
test.predictions <- predict(model, test)
test.predictions <- predict(model, test)
test.predictions <- cbind( test$problem_id, predict(model, test))
test.predictions <- cbind( test$problem_id, predict(model, test))
test.predictions
predict(model, test)
test.predictions <- predict(model, test)
test.predictions <- cbind(test$problem_id, test.predictions)
test.predictions
test.predictions <- cbind(test.predictions, test$problem_id)
test.predictions
predict(model, test)
test.predictions <- predict(model, test)
test.predictions <- cbind(test.predictions, test$problem_id)
test.predictions
test.predictions <- cbind("classe"=test.predictions, test$problem_id)
test.predictions <- as.character(predict(model, test))
test.predictions <- cbind("classe"=test.predictions, test$problem_id)
test.predictions
test.predictions <- cbind("classe"=test.predictions, "id" = test$problem_id)
test.predictions
test.predictions <- data.frame("classe"=test.predictions, "id" = test$problem_id)
test.predictions
predict(model, test)
test.predictions <- as.character(predict(model, test))
test.predictions <- data.frame("classe"=test.predictions, "id" = test$problem_id)
test.predictions
test.predictions <- predict(model, test)
test.predictions <- data.frame("classe"=test.predictions, "id" = test$problem_id)
test.predictions
test.predictions <- data.frame("classe"=predict(model, test), "id" = test$problem_id)
test.predictions
test.predictions <- predict(model, test)
pml_write_files = function(x){
n = length(x)
for(i in 1:n){
filename = paste0("problem_id_",i,".txt")
write.table(x[i],file=filename,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
pml_write_files(test.predictions)
test.predictions
test.predictions
